using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using UnityEditor;
using UnityEngine;

namespace PrefabPalette 
{
    /// <summary>
    /// Scriptable object that holds the editable list of collection names.
    /// </summary>
    public class CollectionsList : ScriptableObject
    {
        /// <summary>
        /// Editable list of collection names exposed in CollectionsListInspector.
        /// </summary>
        public List<string> collectionNames = new List<string>();

        /// <summary>
        /// Updates list to match Enum values.
        /// </summary>
        public void SyncListWithEnum()
        {
            // Ensure the enum and list is synced
            collectionNames.Clear();
            collectionNames.AddRange(Enum.GetValues(typeof(CollectionName))
                      .Cast<CollectionName>()
                      .Where(e => e != CollectionName.None) // Exclude None
                      .Select(e => e.ToString())); // Convert enums to strings
        }

        /// <summary>
        /// Writes collection names list to a file as an enum.
        /// </summary>
        public void GenerateEnum()
        {
            string filePath = Path.Combine(PathDr.GetToolPath, "Scripts", "CollectionNames.cs");

            // Name validation
            List<string> validNames = collectionNames
                .Where(i => !string.IsNullOrWhiteSpace(i))
                .Select(SanitiseEnumName)
                .ToList();

            // File creation
            string content = "// *!DO NOT MANUALLY EDIT OR DELETE!*\n";
            content += "// This File Is Auto-Generated by CollectionsList\n";
            content += "namespace PrefabPalette {\n";
            content += "    public enum CollectionName {\n        None,\n";
            foreach (var name in validNames)
            {
                content += $"        {name},\n";
            }
            content += "    }\n}";

            File.WriteAllText(filePath, content);
            AssetDatabase.Refresh();
        }

        /// <summary>
        /// Ensures correct syntax for compatibility with enums.
        /// </summary>
        private string SanitiseEnumName(string name)
        {
            // Remove invalid characters & replace spaces with underscores
            name = Regex.Replace(name, @"[^a-zA-Z0-9_]", "_");

            // Ensure it doesn't start with a number
            if (char.IsDigit(name[0]))
            {
                name = "_" + name;
            }

            return name;
        }
    }
}
